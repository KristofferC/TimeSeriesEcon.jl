var documenterSearchIndex = {"docs":
[{"location":"tseries/#TSeries","page":"TSeries","title":"TSeries","text":"","category":"section"},{"location":"tseries/","page":"TSeries","title":"TSeries","text":"s = TSeries(mm(2020, 1), ones(10));","category":"page"},{"location":"tseries/","page":"TSeries","title":"TSeries","text":"And, of course, we can reference specific functions.","category":"page"},{"location":"tseries/","page":"TSeries","title":"TSeries","text":"TSeries","category":"page"},{"location":"tseries/#TimeSeriesEcon.TSeries","page":"TSeries","title":"TimeSeriesEcon.TSeries","text":"struct TSeries{Frequency} <: AbstractVector{Float64}\n\nData structure representing a time-series vector. The following  operations are allowed:\n\nindexing using MIT (aka \"moment-in-time\") and UnitRange{MIT}\nassignment using MIT and UnitRange{MIT}\n\nIn addition, most of the operations available to Julia vectors (+, -, *, etc.) are supported by TSeries as well.\n\nExamples\n\nCreate TSeries\n\njulia> x = TSeries(qq(2020, 1), ones(4))\nTSeries{Quarterly} of length 4\n2020Q1: 1.0\n2020Q2: 1.0\n2020Q3: 1.0\n2020Q4: 1.0\n\nIndex into TSeries\n\njulia> x[qq(2020, 1)]\n1.0\n\njulia> x[qq(2020, 1):qq(2020, 2)]\nTSeries{Quarterly} of length 2\n2020Q1: 1.0\n2020Q2: 1.0\n\nAssignment using MIT\n\njulia> x[qq(2020, 1)] = 100; x\nTSeries{Quarterly} of length 4\n2020Q1: 100.0\n2020Q2: 1.0\n2020Q3: 1.0\n2020Q4: 1.0\n\njulia> x[qq(2020, 1):qq(2020, 2)] = 100; x\nTSeries{Quarterly} of length 4\n2020Q1: 100.0\n2020Q2: 100.0\n2020Q3: 1.0\n2020Q4: 1.0\n\nArithmetic Operations on TSeries\n\njulia> x = TSeries(qq(2020, 1), ones(4))\nTSeries{Quarterly} of length 4\n2020Q1: 1.0\n2020Q2: 1.0\n2020Q3: 1.0\n2020Q4: 1.0\n\njulia> 2*x + 98\nTSeries{Quarterly} of length 4\n2020Q1: 100.0\n2020Q2: 100.0\n2020Q3: 100.0\n2020Q4: 100.0\n\njulia> log(exp(x))\nTSeries{Quarterly} of length 4\n2020Q1: 1.0\n2020Q2: 1.0\n2020Q3: 1.0\n2020Q4: 1.0\n\n\n\n\n\n","category":"type"},{"location":"mit/#MIT-aka-\"Moment-in-Time\"","page":"MIT","title":"MIT aka \"Moment in Time\"","text":"","category":"section"},{"location":"mit/","page":"MIT","title":"MIT","text":"yy(2020)","category":"page"},{"location":"mit/","page":"MIT","title":"MIT","text":"And, of course, we can reference specific functions.","category":"page"},{"location":"mit/","page":"MIT","title":"MIT","text":"mm(x, y)","category":"page"},{"location":"mit/#TimeSeriesEcon.mm-Tuple{Any,Any}","page":"MIT","title":"TimeSeriesEcon.mm","text":"mm(y::Int64, p::Int64)\n\nRepresents a Monthly date and returns MIT{Monthly} type instance.\n\nExamples\n\njulia> mm(2020, 1)\n2020M1\n\njulia> mm(2020, 1) + 5\n2020M6\n\n\n\n\n\n","category":"method"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"1 + 1","category":"page"},{"location":"#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"examples.md\", \"mit.md\", \"tseries.md\"]\n","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TimeSeriesEcon","category":"page"},{"location":"#TimeSeriesEcon","page":"Home","title":"TimeSeriesEcon","text":"TimeSeriesEcon\n\nThis package is part of the StateSpaceEcon ecosystem. TimeSeriesEcon.jl provides functionality to work with low-Frequency discrete macroeconomic time-series data.\n\nFrequencies (abstract type):\n\nUnit\nMonthly\nQuarterly\nYearly\n\nTypes:\n\nMIT{Frequency} (aka \"Moment In Time\")\na primitive type denoting monthly, quarterly, and yearly dates\nTSeries{Frequency}\nan AbstractVector that can be indexed using MIT\n\nFunctions:\n\nMIT Constructors/Functions\nmm(year::Int, period::Int): returns a monthly MIT type instance\nqq(year::Int, period::Int): returns a quarterly MIT type instance\nyy(year::Int): returns a yearly MIT type instance\nii(x::Int): returns a unit MIT type instance\nyear(x::MIT): returns a Int64 year value associated with x\nperiod(x::MIT): returns a Int64 period value associated with x\n\nFunctions operating on TSeries\nmitrange(x::TSeries): returns a UnitRange{MIT{Frequency}} for the given x\nfirstdate(x::TSeries): returns MIT{Frequency} first date associated with x  \nlastdate(x::TSeries): returns MIT{Frequency} last date associated with x\nppy(x::TSeries): returns the number of periods per year for x::TSeries. (ppy also accepts x::MIT and x::Frequency) \nshift(x::TSeries, i::Int64): shifts the dates of x by firstdate(x) - i\nshift!: in-place version of shift\npct(x::TSeries, shift_value::Int64; islog::Bool = false): calculates percent rate of change of x::TSeries\napct(x::TSeries, islog::Bool = false): calculates annualized percent rate of change of x::TSeries\nnanrm!(x::TSeries, type::Symbol=:both): removes NaN from x::TSeries\n\n\n\n\n\n","category":"module"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
