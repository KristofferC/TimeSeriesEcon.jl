var documenterSearchIndex = {"docs":
[{"location":"tseries/#TSeries","page":"TSeries","title":"TSeries","text":"","category":"section"},{"location":"tseries/","page":"TSeries","title":"TSeries","text":"TSeries","category":"page"},{"location":"tseries/#TimeSeriesEcon.TSeries","page":"TSeries","title":"TimeSeriesEcon.TSeries","text":"TSeries\n\nData structure representing a time-series vector. The following  operations are allowed:\n\nindexing using MIT (aka \"moment-in-time\") and UnitRange{MIT}\nassignment using MIT and UnitRange{MIT}\n\nIn addition, most of the operations available to Julia vectors (+, -, *, etc.) are supported by TSeries as well.\n\nExamples\n\nCreate TSeries\n\njulia> x = TSeries(qq(2020, 1), ones(4))\nTSeries{Quarterly} of length 4\n2020Q1: 1.0\n2020Q2: 1.0\n2020Q3: 1.0\n2020Q4: 1.0\n\nIndex into TSeries\n\njulia> x[2000Q1]\n1.0\n\njulia> x[qq(2020, 1):qq(2020, 2)]\nTSeries{Quarterly} of length 2\n2020Q1: 1.0\n2020Q2: 1.0\n\nAssignment using MIT\n\njulia> x[qq(2020, 1)] = 100; x\nTSeries{Quarterly} of length 4\n2020Q1: 100.0\n2020Q2: 1.0\n2020Q3: 1.0\n2020Q4: 1.0\n\njulia> x[qq(2020, 1):qq(2020, 2)] = 100; x\nTSeries{Quarterly} of length 4\n2020Q1: 100.0\n2020Q2: 100.0\n2020Q3: 1.0\n2020Q4: 1.0\n\nArithmetic Operations on TSeries\n\njulia> x = TSeries(qq(2020, 1), ones(4))\nTSeries{Quarterly} of length 4\n2020Q1: 1.0\n2020Q2: 1.0\n2020Q3: 1.0\n2020Q4: 1.0\n\njulia> 2*x + 98\nTSeries{Quarterly} of length 4\n2020Q1: 100.0\n2020Q2: 100.0\n2020Q3: 100.0\n2020Q4: 100.0\n\njulia> log(exp(x))\nTSeries{Quarterly} of length 4\n2020Q1: 1.0\n2020Q2: 1.0\n2020Q3: 1.0\n2020Q4: 1.0\n\n\n\n\n\n","category":"type"},{"location":"tseries/","page":"TSeries","title":"TSeries","text":"mitrange","category":"page"},{"location":"tseries/#TimeSeriesEcon.mitrange","page":"TSeries","title":"TimeSeriesEcon.mitrange","text":"mitrange(x::TSeries)\n\nReturn an UnitRange{MIT{<:Frequency}} associated with x.\n\nExamples\n\njulia> mitrange(TSeries(qq(2020, 1), ones(4)))\n2020Q1:2020Q4\n\n\n\n\n\n","category":"function"},{"location":"tseries/","page":"TSeries","title":"TSeries","text":"firstdate","category":"page"},{"location":"tseries/#TimeSeriesEcon.firstdate","page":"TSeries","title":"TimeSeriesEcon.firstdate","text":"firstdate(x::TSeries)\n\nReturn an MIT indicating the first date in the TSeries.\n\nExamples\n\njulia> firstdate(TSeries(qq(2020, 1), ones(10)))\n2020Q1\n\n\n\n\n\n","category":"function"},{"location":"tseries/","page":"TSeries","title":"TSeries","text":"lastdate","category":"page"},{"location":"tseries/#TimeSeriesEcon.lastdate","page":"TSeries","title":"TimeSeriesEcon.lastdate","text":"lastdate(x::TSeries)\n\nReturn an MIT indicating the last date in the TSeries.\n\nExamples\n\njulia> lastdate(TSeries(qq(2020, 1), ones(10)))\n2022Q2\n\n\n\n\n\n","category":"function"},{"location":"tseries/","page":"TSeries","title":"TSeries","text":"ppy","category":"page"},{"location":"tseries/#TimeSeriesEcon.ppy","page":"TSeries","title":"TimeSeriesEcon.ppy","text":"ppy(::Frequency)\n\nReturns the number of periods per year for a given Frequency, MIT, and TSeries\n\nExamples\n\njulia> ppy(Quarterly)                   # Frequency\n4\n\njulia> ppy(mm(2020, 1))                 # MIT\n12\n\njulia> ppy(TSeries(yy(2020), ones(3)))   # TSeries\n1\n\n\n\n\n\nppy(::MIT)\nppy(::Type{MIT})\n\nWhen applied to an MIT instance or type, return the ppy of its frequency.\n\n\n\n\n\nppy(::TSeries)\nppy(::Type{TSeries})\n\nWhen applied to a TSeries instance or type, return the ppy of its frequency.\n\n\n\n\n\n","category":"function"},{"location":"tseries/","page":"TSeries","title":"TSeries","text":"shift","category":"page"},{"location":"tseries/#TimeSeriesEcon.shift","page":"TSeries","title":"TimeSeriesEcon.shift","text":"shift(x::TSeries, n::Int64)\n\nShift dates of x back by k periods.  Note: The implementation of is similar to IRIS ts{1}.\n\nExamples\n\njulia> shift(TSeries(qq(2020, 1), ones(4)), 1)\nTSeries{Quarterly} of length 4\n2019Q4: 1.0\n2020Q1: 1.0\n2020Q2: 1.0\n2020Q3: 1.0\n\n\njulia> shift(TSeries(qq(2020, 1), ones(4)), -1)\nTSeries{Quarterly} of length 4\n2020Q2: 1.0\n2020Q3: 1.0\n2020Q4: 1.0\n2021Q1: 1.0\n\nSee also: shift!\n\n\n\n\n\n","category":"function"},{"location":"tseries/","page":"TSeries","title":"TSeries","text":"shift!","category":"page"},{"location":"tseries/#TimeSeriesEcon.shift!","page":"TSeries","title":"TimeSeriesEcon.shift!","text":"shift!(x::TSeries, n::Int64)\n\nShift dates of x back by k periods, in-place.  Note: The implementation of is similar to IRIS ts{1}.\n\nExamples\n\njulia> x = TSeries(qq(2020, 1), ones(4));\n\njulia> shift!(x, 1);\n\njulia> x\nTSeries{Quarterly} of length 4\n2019Q4: 1.0\n2020Q1: 1.0\n2020Q2: 1.0\n2020Q3: 1.0\n\nSee also: shift\n\n\n\n\n\n","category":"function"},{"location":"tseries/","page":"TSeries","title":"TSeries","text":"pct","category":"page"},{"location":"tseries/#TimeSeriesEcon.pct","page":"TSeries","title":"TimeSeriesEcon.pct","text":"pct(x::TSeries, shift_value::Int64, islog::Bool)\n\nCalculate percentage growth in x given a shift_value.\n\nNote: The implementation is similar to IRIS.\n\nExamples\n\njulia> x = TSeries(yy(2000), Vector(1:4));\n\njulia> pct(x, -1)\nTSeries{Yearly} of length 3\n2001Y: 100.0\n2002Y: 50.0\n2003Y: 33.33333333333333\n\nSee also: apct\n\n\n\n\n\n","category":"function"},{"location":"tseries/","page":"TSeries","title":"TSeries","text":"apct","category":"page"},{"location":"tseries/#TimeSeriesEcon.apct","page":"TSeries","title":"TimeSeriesEcon.apct","text":"apct(x::TSeries, islog::Bool)\n\nCalculate annualised percent rate of change in x.\n\nNote: The implementation is similar to IRIS.\n\nExamples\n\njulia> x = TSeries(qq(2018, 1), Vector(1:8));\n\njulia> apct(x)\nTSeries{Quarterly} of length 7\n2018Q2: 1500.0\n2018Q3: 406.25\n2018Q4: 216.04938271604937\n2019Q1: 144.140625\n2019Q2: 107.35999999999999\n2019Q3: 85.26234567901243\n2019Q4: 70.59558517284461\n\nSee also: pct\n\n\n\n\n\n","category":"function"},{"location":"tseries/","page":"TSeries","title":"TSeries","text":"nanrm!","category":"page"},{"location":"tseries/#TimeSeriesEcon.nanrm!","page":"TSeries","title":"TimeSeriesEcon.nanrm!","text":"nanrm!(s::TSeries, type::Symbol)\n\nRemove NaN values that are either at the beginning of the s and/or end of x.\n\nExamples\n\njulia> s = TSeries(yy(2018), [NaN, NaN, 1, 2, NaN]);\n\njulia> nanrm!(s);\n\njulia> s\nTSeries{Yearly} of length 2\n2020Y: 1.0\n2021Y: 2.0\n\n\n\n\n\n","category":"function"},{"location":"tseries/","page":"TSeries","title":"TSeries","text":"@rec","category":"page"},{"location":"tseries/#TimeSeriesEcon.@rec","page":"TSeries","title":"TimeSeriesEcon.@rec","text":"@rec(rng, eqn)\n\nComputes recursive calculations for the given range rng and equation eqn.\n\nExamples\n\njulia> s = TSeries(1U, zeros(1))\n1-element Unit TSeries from 1U:\n      1U : 0.0\n\njulia> s[1U] = 0\n0\n\njulia> s[2U] = 1\n1\n\njulia> s \n2-element Unit TSeries from 1U:\n      1U : 0.0\n      2U : 1.0\n\njulia> @rec(3U:10U, s[t] = s[t-1] + s[t-2])\n\njulia> s\n10-element Unit TSeries from 1U:\n      1U : 0.0\n      2U : 1.0\n      3U : 1.0\n      4U : 2.0\n      5U : 3.0\n      6U : 5.0\n      7U : 8.0\n      8U : 13.0\n      9U : 21.0\n     10U : 34.0\n\n\n\n\n\n","category":"macro"},{"location":"mit/#MIT-aka-\"Moment-in-Time\"","page":"MIT","title":"MIT aka \"Moment in Time\"","text":"","category":"section"},{"location":"mit/","page":"MIT","title":"MIT","text":"MIT","category":"page"},{"location":"mit/#TimeSeriesEcon.MIT","page":"MIT","title":"TimeSeriesEcon.MIT","text":"MIT{Frequency}(x::Int64)\n\nMIT is a primitive type (Signed 64) representing a discrete date.\n\nNote: Please use yy, qq, 'mm', ii to instantiate MITs.  MITs are mainly used internally for the package development.\n\nExamples\n\njulia> MIT{Yearly}(2000)\n2000Y\njulia> MIT{Monthly}(2020*12 + 3)\n2020M4\n\n\n\n\n\n","category":"type"},{"location":"mit/","page":"MIT","title":"MIT","text":"mm","category":"page"},{"location":"mit/#TimeSeriesEcon.mm","page":"MIT","title":"TimeSeriesEcon.mm","text":"mm(y::Int64, p::Int64)\n\nRepresents a Monthly date and returns MIT{Monthly} type instance.\n\nExamples\n\njulia> mm(2020, 1)\n2020M1\n\njulia> mm(2020, 1) + 5\n2020M6\n\n\n\n\n\n","category":"function"},{"location":"mit/","page":"MIT","title":"MIT","text":"qq","category":"page"},{"location":"mit/#TimeSeriesEcon.qq","page":"MIT","title":"TimeSeriesEcon.qq","text":"qq(y::Int64, p::Int64)\n\nRepresents a Quarterly date and returns MIT{Quarterly} type instance.\n\nExamples\n\njulia> qq(2020, 1)\n2020Q1\n\njulia> qq(2020, 1) + 5\n2021Q2\n\n\n\n\n\n","category":"function"},{"location":"mit/","page":"MIT","title":"MIT","text":"yy","category":"page"},{"location":"mit/#TimeSeriesEcon.yy","page":"MIT","title":"TimeSeriesEcon.yy","text":"yy(y::Int64)\n\nRepresents a Yearly date and returns MIT{Yearly} type instance.\n\nExamples\n\njulia> yy(2020)\n2020Y\n\njulia> yy(2020) + 5\n2025Y\n\n\n\n\n\n","category":"function"},{"location":"mit/","page":"MIT","title":"MIT","text":"ii","category":"page"},{"location":"mit/#TimeSeriesEcon.ii","page":"MIT","title":"TimeSeriesEcon.ii","text":"ii(x::Int64)\n\nRepresents an Integer date and return MIT{Unit} type instance\n\nExamples\n\njulia> ii(123)\nii(123)\n\njulia> ii(123) + 5\nii(128)\n\njulia> typeof(ii(123))\nMIT{Unit}\n\n\n\n\n\n","category":"function"},{"location":"mit/","page":"MIT","title":"MIT","text":"year","category":"page"},{"location":"mit/#TimeSeriesEcon.year","page":"MIT","title":"TimeSeriesEcon.year","text":"year(x::MIT)\n\nReturn ::Int64 representing year for a given MIT\n\nNote: an internal method for now.\n\nExamples\n\njulia> year(mm(2020, 1))\n2020\n\n\n\n\n\n","category":"function"},{"location":"mit/","page":"MIT","title":"MIT","text":"period","category":"page"},{"location":"mit/#TimeSeriesEcon.period","page":"MIT","title":"TimeSeriesEcon.period","text":"period(x::MIT)\n\nReturn ::Int64 representing period for a given MIT\n\nExamples\n\njulia> period(mm(2020, 1))\n1\n\n\n\n\n\n","category":"function"},{"location":"mit/","page":"MIT","title":"MIT","text":"frequencyof","category":"page"},{"location":"mit/#TimeSeriesEcon.frequencyof","page":"MIT","title":"TimeSeriesEcon.frequencyof","text":"frequencyof(::MIT)\nfrequencyof(::Type{MIT})\n\nReturn the Frequency type of the given MIT instance of type.\n\n\n\n\n\nCan be applied to a TSeries instance or a range of MIT to return its Frequency.\n\n\n\n\n\n","category":"function"},{"location":"quickstart/#Quickstart","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"TimeSeriesEcon.jl provides two Julia types:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"MIT aka moment-in-time is a discrete date\ninitialized using mm, qq, yy, ii constructors.\nTSeries is 1-dimensional array indexed using MITs","category":"page"},{"location":"quickstart/#MIT-aka-\"Moment-In-Time\"","page":"Quickstart","title":"MIT aka \"Moment-In-Time\"","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Let's start by creating a quarterly MIT. Every MIT is equipped with Frequency information.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"julia> using TimeSeriesEcon\n\njulia> qq(2020, 3)\n2020Q3\n\njulia> typeof(qq(2020, 3))\nMIT{Quarterly}\n\njulia> frequencyof(qq(2020, 3))\nQuarterly","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"It's possible to access year and period information of an MIT. ","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"julia> year(qq(2020, 3))\n2020\n\njulia> period(qq(2020, 3))\n3","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"You can also retrieve the number of periods for an MIT. Plus, the function ppy returns an integer indicating the number of periods based on the associted Frequency.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"julia> ppy(qq(2020, 3))\n4\n\njulia> ppy(mm(2020, 1))\n12\n\njulia> ppy(yy(2020))\n1","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Finally, you can add/subtract periods.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"julia> mm(2018, 1) + 24\n2020M1\n\njulia> qq(2018, 1) + 8\n2020Q1\n\njulia> yy(2018) + 2\n2020Y","category":"page"},{"location":"quickstart/#TSeries","page":"Quickstart","title":"TSeries","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"TSeries behave like regular vectors, but you can access/assign values using MITs.  ","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"julia> TSeries(qq(2020, 3), ones(5))\n5-element Quarterly TSeries from 2020Q3:\n  2020Q3 : 1.0\n  2020Q4 : 1.0\n  2021Q1 : 1.0\n  2021Q2 : 1.0\n  2021Q3 : 1.0","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Access values using a single MIT or range of MITs.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"julia> myseries = TSeries(qq(2020, 3), ones(5));\n\njulia> myseries[qq(2020, 3)]\n1.0\n\njulia> myseries[qq(2020, 3)]\n1.0\n\njulia> myseries[qq(2020, 3):qq(2021, 2)]\n4-element Quarterly TSeries from 2020Q3:\n  2020Q3 : 1.0\n  2020Q4 : 1.0\n  2021Q1 : 1.0\n  2021Q2 : 1.0","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Assign values using a single MIT or range of MITs.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"julia> myseries = TSeries(qq(2020, 3), ones(5));\n\njulia> myseries[qq(2020, 3)] = 10;\n\njulia> myseries\n5-element Quarterly TSeries from 2020Q3:\n  2020Q3 : 10.0\n  2020Q4 : 1.0\n  2021Q1 : 1.0\n  2021Q2 : 1.0\n  2021Q3 : 1.0","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"julia> myseries[qq(2020, 4):qq(2021, 3)] = 100;\n\njulia> myseries\n5-element Quarterly TSeries from 2020Q3:\n  2020Q3 : 10.0\n  2020Q4 : 100.0\n  2021Q1 : 100.0\n  2021Q2 : 100.0\n  2021Q3 : 100.0","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Finally, you can assign values at arbitrary points.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"julia> myseries = TSeries(qq(2020, 3), ones(5));\n\njulia> myseries[qq(2020, 1)] = 1;\n\njulia> myseries\n7-element Quarterly TSeries from 2020Q1:\n  2020Q1 : 1.0\n  2020Q2 : NaN\n  2020Q3 : 1.0\n  2020Q4 : 1.0\n  2021Q1 : 1.0\n  2021Q2 : 1.0\n  2021Q3 : 1.0\n\njulia> myseries[qq(2022, 1):qq(2022, 2)] = 1;\n\njulia> myseries\n10-element Quarterly TSeries from 2020Q1:\n  2020Q1 : 1.0\n  2020Q2 : NaN\n  2020Q3 : 1.0\n  2020Q4 : 1.0\n  2021Q1 : 1.0\n  2021Q2 : 1.0\n  2021Q3 : 1.0\n  2021Q4 : NaN\n  2022Q1 : 1.0\n  2022Q2 : 1.0","category":"page"},{"location":"frequency/#Frequency","page":"Frequency","title":"Frequency","text":"","category":"section"},{"location":"frequency/","page":"Frequency","title":"Frequency","text":"Frequency is abstract type embedded into both MIT and TSeries as a parameter.","category":"page"},{"location":"frequency/","page":"Frequency","title":"Frequency","text":"Frequency","category":"page"},{"location":"frequency/#TimeSeriesEcon.Frequency","page":"Frequency","title":"TimeSeriesEcon.Frequency","text":"Frequency\n\nFrequency is an abstract type. \n\nMonthly, Quarterly, Yearly, Unit abstract types are subtypes of Frequency.\n\nExamples\n\njulia> Quarterly <: Frequency\ntrue\n\n\n\n\n\n","category":"type"},{"location":"frequency/","page":"Frequency","title":"Frequency","text":"Monthly","category":"page"},{"location":"frequency/#TimeSeriesEcon.Monthly","page":"Frequency","title":"TimeSeriesEcon.Monthly","text":"Monthly\n\nSee also: Frequency ```\n\n\n\n\n\n","category":"type"},{"location":"frequency/","page":"Frequency","title":"Frequency","text":"Quarterly","category":"page"},{"location":"frequency/#TimeSeriesEcon.Quarterly","page":"Frequency","title":"TimeSeriesEcon.Quarterly","text":"Quarterly\n\nSee also: Frequency ```\n\n\n\n\n\n","category":"type"},{"location":"frequency/","page":"Frequency","title":"Frequency","text":"Yearly","category":"page"},{"location":"frequency/#TimeSeriesEcon.Yearly","page":"Frequency","title":"TimeSeriesEcon.Yearly","text":"Yearly\n\nSee also: Frequency ```\n\n\n\n\n\n","category":"type"},{"location":"frequency/","page":"Frequency","title":"Frequency","text":"Unit","category":"page"},{"location":"frequency/#TimeSeriesEcon.Unit","page":"Frequency","title":"TimeSeriesEcon.Unit","text":"Unit\n\nSee also: Frequency ```\n\n\n\n\n\n","category":"type"},{"location":"#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the TimeSeriesEcon documentation!  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"info: StateSpaceEcon Collection of Julia Packages\nOur packages are on GitHub:StateSpaceEcon.jl\nModelBaseEcon.jl\nTimeSeriesEcon.jlNote: The documentation of packages is under heavy development. (July 27, 2020)","category":"page"},{"location":"#Table-of-Contents","page":"Home","title":"Table of Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"quickstart.md\", \n         \"mit.md\", \n         \"tseries.md\",\n         \"frequency.md\"]\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"TimeSeriesEcon","category":"page"},{"location":"#TimeSeriesEcon","page":"Home","title":"TimeSeriesEcon","text":"TimeSeriesEcon\n\nThis package is part of the StateSpaceEcon ecosystem. TimeSeriesEcon.jl provides functionality to work with low-Frequency discrete macroeconomic time-series data.\n\nFrequencies (abstract type):\n\nUnit\nMonthly\nQuarterly\nYearly\n\nTypes:\n\nMIT{Frequency} (aka \"Moment In Time\")\na primitive type denoting monthly, quarterly, and yearly dates\nTSeries{Frequency}\nan AbstractVector that can be indexed using MIT\n\nFunctions:\n\nMIT Constructors/Functions\nmm(year::Int, period::Int): returns a monthly MIT type instance\nqq(year::Int, period::Int): returns a quarterly MIT type instance\nyy(year::Int): returns a yearly MIT type instance\nii(x::Int): returns a unit MIT type instance\nyear(x::MIT): returns a Int64 year value associated with x\nperiod(x::MIT): returns a Int64 period value associated with x\nfrequencyof(x::MIT): returns <: Frequency assosicated wtih x\n\nFunctions operating on TSeries\nmitrange(x::TSeries): returns a UnitRange{MIT{Frequency}} for the given x\nfirstdate(x::TSeries): returns MIT{Frequency} first date associated with x  \nlastdate(x::TSeries): returns MIT{Frequency} last date associated with x\nppy(x::TSeries): returns the number of periods per year for x::TSeries. (ppy also accepts x::MIT and x::Frequency) \nshift(x::TSeries, i::Int64): shifts the dates of x by firstdate(x) - i\nshift!: in-place version of shift\npct(x::TSeries, shift_value::Int64; islog::Bool = false): calculates percent rate of change of x::TSeries\napct(x::TSeries, islog::Bool = false): calculates annualized percent rate of change of x::TSeries\nnanrm!(x::TSeries, type::Symbol=:both): removes NaN from x::TSeries\n\n\n\n\n\n","category":"module"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
